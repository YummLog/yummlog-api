// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package model

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// list of foodposts
	// (GET /foodpost)
	ListFoodPosts(c *gin.Context, params ListFoodPostsParams)
	// create food post
	// (POST /foodpost)
	CreateFoodPost(c *gin.Context, params CreateFoodPostParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// ListFoodPosts operation middleware
func (siw *ServerInterfaceWrapper) ListFoodPosts(c *gin.Context) {

	var err error

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFoodPostsParams

	// ------------- Optional query parameter "restaurantName" -------------
	if paramValue := c.Query("restaurantName"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "restaurantName", c.Request.URL.Query(), &params.RestaurantName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter restaurantName: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListFoodPosts(c, params)
}

// CreateFoodPost operation middleware
func (siw *ServerInterfaceWrapper) CreateFoodPost(c *gin.Context) {

	var err error

	c.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateFoodPostParams

	// ------------- Optional query parameter "restaurantName" -------------
	if paramValue := c.Query("restaurantName"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "restaurantName", c.Request.URL.Query(), &params.RestaurantName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter restaurantName: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateFoodPost(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/foodpost", wrapper.ListFoodPosts)

	router.POST(options.BaseURL+"/foodpost", wrapper.CreateFoodPost)

	return router
}
